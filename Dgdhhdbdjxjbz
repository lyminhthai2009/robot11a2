// #include <Wire.h>
// #include "Adafruit_TCS34725.h"

//Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X);

#define PWM_PIN_L_A 2
#define PWM_PIN_L_B 10
#define PWM_PIN_R_A 6
#define PWM_PIN_R_B 5

#define SENSOR_1_PIN 4  // Cảm biến ngoài cùng bên trái
#define SENSOR_2_PIN 3  // Cảm biến trong bên trái
#define SENSOR_3_PIN 1  // Cảm biến trong bên phải
#define SENSOR_4_PIN 0  // Cảm biến ngoài cùng bên phải

#define W_LED_ON 20
#define IR_LED_ON 21

#define threshold 2000

// --- CÁC THÔNG SỐ ĐỂ TINH CHỈNH ---
uint8_t base_speed = 140; // Tốc độ cơ bản của xe
uint8_t turn_speed = 140; // Tốc độ khi rẽ cua gắt (xoay tại chỗ)

// Hệ số bù trừ cho motor bên phải (do 2 motor không đều nhau)
// Nếu xe có xu hướng lệch trái khi đi thẳng -> tăng hệ số này lên
// Nếu xe có xu hướng lệch phải khi đi thẳng -> giảm hệ số này xuống
float motor_r_factor = 1.6;

// --- CÁC HÀM DI CHUYỂN ---

void stop() {
  analogWrite(PWM_PIN_L_A, 0);
  analogWrite(PWM_PIN_L_B, 0);
  analogWrite(PWM_PIN_R_A, 0);
  analogWrite(PWM_PIN_R_B, 0);
  Serial.println("Stop");
}

void forward() {
  analogWrite(PWM_PIN_L_A, base_speed);
  analogWrite(PWM_PIN_L_B, 0);
  analogWrite(PWM_PIN_R_A, base_speed * motor_r_factor);
  analogWrite(PWM_PIN_R_B, 0);
  Serial.println("Forward");
}

// Rẽ phải NHẸ: Bánh trái chạy nhanh, bánh phải chạy chậm lại
void turn_right_gentle() {
  analogWrite(PWM_PIN_L_A, base_speed);
  analogWrite(PWM_PIN_L_B, 0);
  analogWrite(PWM_PIN_R_A, base_speed * motor_r_factor * 0.4); // Giảm tốc độ bánh phải
  analogWrite(PWM_PIN_R_B, 0);
  Serial.println("Turn Right Gentle");
}

// Rẽ trái NHẸ: Bánh phải chạy nhanh, bánh trái chạy chậm lại
void turn_left_gentle() {
  analogWrite(PWM_PIN_L_A, base_speed * 0.4); // Giảm tốc độ bánh trái
  analogWrite(PWM_PIN_L_B, 0);
  analogWrite(PWM_PIN_R_A, base_speed * motor_r_factor);
  analogWrite(PWM_PIN_R_B, 0);
  Serial.println("Turn Left Gentle");
}

// Rẽ phải GẮT: Bánh trái tiến, bánh phải lùi (xoay tại chỗ)
void turn_right_sharp() {
  analogWrite(PWM_PIN_L_A, turn_speed);
  analogWrite(PWM_PIN_L_B, 0);
  analogWrite(PWM_PIN_R_A, 0);
  analogWrite(PWM_PIN_R_B, turn_speed * motor_r_factor);
  Serial.println("Turn Right Sharp");
}

// Rẽ trái GẮT: Bánh trái lùi, bánh phải tiến (xoay tại chỗ)
void turn_left_sharp() {
  analogWrite(PWM_PIN_L_A, 0);
  analogWrite(PWM_PIN_L_B, turn_speed);
  analogWrite(PWM_PIN_R_A, turn_speed * motor_r_factor);
  analogWrite(PWM_PIN_R_B, 0);
  Serial.println("Turn Left Sharp");
}


void setup() {
  Serial.begin(115200);

  pinMode(PWM_PIN_L_A, OUTPUT);
  pinMode(PWM_PIN_L_B, OUTPUT);
  pinMode(PWM_PIN_R_A, OUTPUT);
  pinMode(PWM_PIN_R_B, OUTPUT);

  pinMode(W_LED_ON, OUTPUT);
  pinMode(IR_LED_ON, OUTPUT);
  digitalWrite(W_LED_ON, 0);
  digitalWrite(IR_LED_ON, 1);
}

void loop() {
  int sensor_1_state = analogRead(SENSOR_1_PIN);
  int sensor_2_state = analogRead(SENSOR_2_PIN);
  int sensor_3_state = analogRead(SENSOR_3_PIN);
  int sensor_4_state = analogRead(SENSOR_4_PIN);

  // In giá trị cảm biến để debug
  Serial.print("ir = \t");
  Serial.print(sensor_1_state); Serial.print("\t");
  Serial.print(sensor_2_state); Serial.print("\t");
  Serial.print(sensor_3_state); Serial.print("\t");
  Serial.println(sensor_4_state);

  // Xây dựng mảng cảm biến
  // Giả sử: Giá trị cảm biến <= threshold -> Thấy vạch đen (kết quả là 1)
  //          Giá trị cảm biến > threshold  -> Thấy nền trắng (kết quả là 0)
  // sensor_array sẽ có dạng 0bxxxx, với bit tráiสุด là sensor 1, phảiสุด là sensor 4
  uint8_t sensor_array = 0;
  if (sensor_1_state <= threshold) sensor_array |= 0b1000;
  if (sensor_2_state <= threshold) sensor_array |= 0b0100;
  if (sensor_3_state <= threshold) sensor_array |= 0b0010;
  if (sensor_4_state <= threshold) sensor_array |= 0b0001;

  Serial.print("Sensor Array (BIN): ");
  Serial.println(sensor_array, BIN);

  switch (sensor_array) {
    // --- TRƯỜNG HỢP LÝ TƯỞNG ---
    case 0b0110: // 2 cảm biến giữa trên line -> đi thẳng
      forward();
      break;

    // --- CÁC TRƯỜNG HỢP LỆCH NHẸ (SỬA LỖI LẮC) ---
    case 0b0100: // Lệch nhẹ sang trái -> Rẽ phải nhẹ để chỉnh lại
      turn_right_gentle();
      break;
    case 0b0010: // Lệch nhẹ sang phải -> Rẽ trái nhẹ để chỉnh lại
      turn_left_gentle();
      break;

    // --- CÁC TRƯỜNG HỢP LỆCH NHIỀU (VÀO CUA) ---
    case 0b1100: // Lệch sang trái -> Rẽ phải gắt
      turn_right_sharp();
      break;
    case 0b0011: // Lệch sang phải -> Rẽ trái gắt
      turn_left_sharp();
      break;

    // --- CÁC TRƯỜNG HỢP LỆCH HẲN RA NGOÀI (CUA RẤT GẮT) ---
    case 0b1000: // Chỉ cảm biến ngoài cùng bên trái thấy line
      turn_right_sharp();
      break;
    case 0b0001: // Chỉ cảm biến ngoài cùng bên phải thấy line
      turn_left_sharp();
      break;

    // --- CÁC TRƯỜNG HỢP ĐẶC BIỆT ---
    case 0b1111: // Cả 4 cảm biến thấy line (vạch ngang, ngã tư)
      forward(); // Tạm thời cho đi thẳng, bạn có thể đổi thành stop()
      break;
    case 0b0000: // Mất line
      // Giữ nguyên hành động cuối cùng hoặc dừng lại.
      // Ở đây ta cho đi thẳng để có cơ hội tìm lại line phía trước
      forward(); 
      break;

    default:
      // Các trường hợp nhiễu khác, cứ cho đi thẳng
      forward();
      break;
  }
  delay(10);
}
